import Foundation

/// An error generated by a HTTP response
public struct HTTPError: Error, Equatable, ExpressibleByIntegerLiteral {
    public let statusCode: Int
    
    public init(statusCode: Int) {
        self.statusCode = statusCode
    }
    
    public init(integerLiteral value: IntegerLiteralType) {
        self.init(statusCode: value)
    }
}

public extension HTTPError {
    static let badRequest: Self = 400
    
    static let unauthorized: Self = 401
    
    /// Request contained valid data and was understood by the server, but the server is refusing action
    static let forbidden: Self = 403
    
    static let notFound: Self = 404
    
    static let requestTimeout: Self = 408
    
    /// Generic error message when an unexpected condition was encountered and no more specific message is suitable
    static let serverError: Self = 500
    
    /// Server was acting as a gateway or proxy and received an invalid response from the upstream server
    static let badGateway: Self = 502
    
    /// Server cannot handle the request (because it is overloaded or down for maintenance)
    static let serviceUnavailable: Self = 503
    
    /// Server was acting as a gateway or proxy and did not receive a timely response from the upstream server
    static let gatewayTimeout: Self = 504
}
